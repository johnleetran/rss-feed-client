{"version":3,"sources":["views/ApiKeyForm.js","views/ApiKeySetConfirmation.js","views/RSSFeeds.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["ApiKeyForm","props","apiKey","setApiKey","setApiKeyLoaded","apiKeyLoaded","handleChange","event","preventDefault","type","target","value","onSubmit","onChange","ApiKeyFormSetConfirmation","RSSFeeds","renderStr","length","useState","loading","setLoading","page","setPage","a","fetch","headers","Headers","response","json","JSON","stringify","useEffect","fetchFromUrl","items","parse","urls","console","log","feeds","item","title","map","href","link","feed","renderList","App","ApiKeySetConfirmation","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"iMA0BeA,MAxBf,SAAoBC,GAAQ,IAClBC,EAAoDD,EAApDC,OAAQC,EAA4CF,EAA5CE,UAAyBC,GAAmBH,EAAjCI,aAAiCJ,EAAnBG,iBACnCE,EAAe,SAACC,GAChBA,EAAMC,iBACY,UAAdD,EAAME,KACNL,EAAgBF,GAEhBC,EAAUI,EAAMG,OAAOC,QAI/B,OACI,6BACI,0BAAMC,SAAUN,GACZ,yCAEI,2BAAOG,KAAK,OAAOE,MAAOT,EAAQW,SAAUP,KAEhD,2BAAOG,KAAK,SAASE,MAAM,cCJ5BG,MAdf,SAAmCb,GAAQ,IACjCI,EAA2BJ,EAA3BI,aAAcU,EAAad,EAAbc,SAChBC,EAAY,GAIhB,OAHGX,EAAaY,OAAS,IACrBD,EAAS,+BAA2BX,IAGpC,6BACI,2BAAIW,GACJ,kBAACD,EAAD,CAAUV,aAAcA,M,oCCoDrBU,MA7Cf,SAAkBd,GAAQ,IAAD,EACSiB,oBAAS,GADlB,mBACdC,EADc,KACLC,EADK,OAEGF,mBAAS,MAFZ,mBAEdG,EAFc,KAERC,EAFQ,KAIbjB,EAAiBJ,EAAjBI,aAJa,4CAMrB,8BAAAkB,EAAA,sEAC2BC,MAAM,mEAAoE,CAAEC,QAAS,IAAIC,QAAQ,CACpH,YAAarB,MAFrB,cACUsB,EADV,gBAIuBA,EAASC,OAJhC,OAIUA,EAJV,OAOQR,GAAW,GACXE,EAAQO,KAAKC,UAAUF,IAR/B,4CANqB,sBAmBrBG,qBAAU,WACF1B,EAAaY,OAAS,GAAKE,GApBd,mCAqBba,MAIR,IAAIC,EAAQ,GACTZ,IACCY,EAAQJ,KAAKK,MAAMb,GAAMc,KACzBC,QAAQC,IAAI,iBAAkBJ,EAAM,GAAGK,MAAM,GAAGC,KAAKC,QAEzD,IAAIA,EAAQP,EAAMQ,KAAI,SAACF,GACnB,OAAQ,6BACI,2BAAG,uBAAGG,KAAMH,EAAKI,KAAMjC,OAAO,UAAU6B,EAAKC,QA9CjE,SAAoBD,GAChB,IAAID,EAAQC,EAAKD,MAAMG,KAAI,SAACG,GACxB,OAAQ,6BAAK,4BAAI,uBAAGF,KAAME,EAAKL,KAAKI,KAAMjC,OAAO,UAAUkC,EAAKL,KAAKC,YAEzE,OAEI,6BACI,4BACKF,IAuCIO,CAAWN,OAK5B,OACI,6BACKC,IC7BEM,MAtBf,WAAgB,IAAD,EACe5B,mBAAS,IADxB,mBACNhB,EADM,KACEC,EADF,OAE2Be,mBAAS,IAFpC,mBAENb,EAFM,KAEQD,EAFR,KAGb,OACE,6BACE,6BACE,gCACE,kBAAC,EAAD,CACEF,OAAQA,EACRC,UAAWA,EACXE,aAAcA,EACdD,gBAAiBA,KAGrB,8BACE,kBAAC2C,EAAD,CAAuB1C,aAAcA,EAAcU,SAAUA,QCVnDiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5B,QAAQ4B,MAAMA,EAAMC,a,6EEzI5BC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.a3534d1d.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nfunction ApiKeyForm(props) {\n    let { apiKey, setApiKey, apiKeyLoaded, setApiKeyLoaded} = props\n    let handleChange = (event) => {\n        event.preventDefault();\n        if (event.type == 'submit') {\n            setApiKeyLoaded(apiKey);\n        } else {\n            setApiKey(event.target.value);\n        }\n    }\n\n    return (\n        <div>\n            <form onSubmit={handleChange}>\n                <label>\n                    ApiKey:\n                    <input type=\"text\" value={apiKey} onChange={handleChange} />\n                </label>\n                <input type=\"submit\" value=\"Submit\" />\n            </form>\n        </div>\n    );\n}\n\nexport default ApiKeyForm;\n","import React, { useState } from 'react';\n\nfunction ApiKeyFormSetConfirmation(props) {\n    let { apiKeyLoaded, RSSFeeds } = props\n    let renderStr = \"\"\n    if(apiKeyLoaded.length > 0){\n        renderStr = `Key has been set to: ${apiKeyLoaded}`;\n    }\n    return (\n        <div>\n            <p>{renderStr}</p>\n            <RSSFeeds apiKeyLoaded={apiKeyLoaded}/>\n        </div>\n    );\n}\n\nexport default ApiKeyFormSetConfirmation;\n","import React, { useState, useEffect } from 'react';\nimport XML from 'xml2js';\nimport { render } from '@testing-library/react';\n\nfunction renderList(item){\n    var feeds = item.feeds.map((feed) => {\n        return (<div><li><a href={feed.item.link} target=\"_blank\">{feed.item.title}</a></li></div>)\n    })\n    return ( \n\n        <div>\n            <ul>\n                {feeds}\n            </ul>\n        </div> \n    )\n}\n\nfunction RSSFeeds(props) {\n    const [loading, setLoading] = useState(true);\n    const [page, setPage] = useState(null);\n\n    const { apiKeyLoaded } = props;\n\n    async function fetchFromUrl(){\n        const response = await fetch(\"https://75iwpa68w3.execute-api.us-west-1.amazonaws.com/Prod/feed\", { headers: new Headers({\n            \"x-api-key\": apiKeyLoaded\n        }) });\n        const json = await response.json();\n        //for (let url of json.urls){\n            //console.log(url)\n            setLoading(false);\n            setPage(JSON.stringify(json));\n        //}\n\n\n    }\n    useEffect(()=>{\n        if (apiKeyLoaded.length > 0 && loading){\n            fetchFromUrl();\n        }\n    })\n\n    let items = []\n    if(page){\n        items = JSON.parse(page).urls\n        console.log(\"item is here: \", items[0].feeds[0].item.title)\n    }\n    var title = items.map((item) => { \n        return (<div>\n                    <p><a href={item.link} target=\"_blank\">{item.title}</a></p>\n                    {renderList(item)}\n                </div>) \n    })\n\n\n    return (\n        <div>\n            {title} \n        </div>\n    );\n}\n\nexport default RSSFeeds;\n","import React, { useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport ApiKeyForm from './views/ApiKeyForm';\nimport ApiKeySetConfirmation from './views/ApiKeySetConfirmation';\nimport RSSFeeds from './views/RSSFeeds';\n\nfunction App() {\n  const [apiKey, setApiKey] = useState(\"\");\n  const [apiKeyLoaded, setApiKeyLoaded] = useState(\"\");\n  return (\n    <div>\n      <div>\n        <header>\n          <ApiKeyForm \n            apiKey={apiKey}\n            setApiKey={setApiKey}\n            apiKeyLoaded={apiKeyLoaded}\n            setApiKeyLoaded={setApiKeyLoaded}\n          />\n        </header>\n        <body>\n          <ApiKeySetConfirmation apiKeyLoaded={apiKeyLoaded} RSSFeeds={RSSFeeds} />\n        </body>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}